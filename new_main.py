from argparse import ArgumentParser
from os import system


banner = """
   ______     _______     ____   ___ ____  _____       _  _  ____  ____   ___  
  / ___\ \   / / ____|   |___ \ / _ \___ \|___ /      | || ||___ \|___ \ / _ \ 
 | |    \ \ / /|  _| _____ __) | | | |__) | |_ \ _____| || |_ __) | __) | | | |
 | |___  \ V / | |__|_____/ __/| |_| / __/ ___) |_____|__   _/ __/ / __/| |_| |
  \____|  \_/  |_____|   |_____|\___/_____|____/         |_||_____|_____|\___/ 

  
                 Chamilo LMS Unauthenticated Big Upload File RCE
                 https://github.com/VanishedPeople/CVE-2017-7269 
                                                                                    
"""

parser = ArgumentParser(
    prog="CVE-2023-4220",
    description="This script exploits the software security flaw described in CVE-2023-4220",
    usage="%(prog)s [-h] [--url URL] [--mode MODE]",
    epilog="For more information, see README.md"
)

parser.add_argument('-u', '--url',    type=str, required=True, help="the target root page chamilo's url")
parser.add_argument('-m', '--mode',   type=str, required=True, help="the action to perform on the vulnerable endpoint")

args = parser.parse_args()


MODE = args.mode
URL  = args.url.rstrip('/')






def check_extension(filename: str, extension: str) -> str:
    if not filename.endswith(f'.{extension}'):
        return f'{filename}.{extension}'
    return filename

def exitWithError(message = None):
    if message:
        print(message)
    print("\nExiting...")
    exit(1)

def main():
    system("clear")
    print(banner)

if __name__ == "__main__":
    try:
        main()
        exit(0)
    except KeyboardInterrupt:
        exitWithError("\nKeyboardInterrupt Detected")
    except Exception as e:
        exitWithError(f"\nUnmanaged Exception: {e}")